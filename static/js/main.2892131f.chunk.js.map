{"version":3,"sources":["components/contactsForm/ContactsForm.js","components/contactsList/ContactsList.js","components/section/Section.js","components/filter/ContactsFilter.js","redux/contacts/contactsAction.js","redux/contacts/contactsSelectors.js","components/Contacts.js","redux/contacts/contactsOperation.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["ContactsForm","state","name","number","onHandleSubmit","e","preventDefault","props","checkDublicateName","alert","addContact","setState","onHandleChange","target","value","onSubmit","this","type","onChange","pattern","title","required","Component","ContactsList","contacts","onDeleteContact","className","map","contact","onClick","id","Section","children","ContactsFilter","filter","setFilter","createAction","deleteContact","getAllContacts","filterContacts","setError","resetError","setContactsLoading","getContactSelector","filterContactSelector","errorContactSelector","error","getFilteringContacts","createSelector","toLowerCase","includes","Contacts","items","a","addContactOperation","deleteContactsOperation","some","getFilteredContacts","getAllContactsOperation","isLoading","mapDispatchToProps","dispatch","axios","get","data","Object","keys","key","response","post","delete","connect","App","contactsReducer","createReducer","payload","_","filterReducer","contactLoaderReducer","contactErrorReducer","rootReducer","combineReducers","isLoadind","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2892131f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nclass ContactsForm extends Component {\n    state = {\n        name: \"\",\n        number: \"\",\n    }\n    \n    onHandleSubmit = (e) => {\n        e.preventDefault()\n        if (this.props.checkDublicateName(this.state.name)) {\n            alert(`${this.state.name} already exist`)\n            return\n        } \n        this.props.addContact(this.state )\n        this.setState({\n            name: \"\",\n            number:\"\",\n        })\n    };\n    onHandleChange = (e) => {\n        const { name, value } = e.target\n        this.setState({ [name]: value }); \n    };\n\n    render() {\n        return (\n            <form onSubmit={this.onHandleSubmit}>\n                <>\n                    Name\n                      <input\n                        type=\"text\"\n                        onChange={this.onHandleChange}\n                        value={this.state.name}\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                    />\n                </>\n                <>\n                    Number\n                      <input\n                        type=\"tel\"\n                        onChange={this.onHandleChange}\n                        value={this.state.number}\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                    />\n                </>\n                <button type=\"submit\" >Add Contact</button>\n            </form>\n            \n               \n        );\n    }\n}\n\nContactsForm.propTypes = {\n    onHandleSubmit: PropTypes.func,\n    name: PropTypes.string,\n    number: PropTypes.string,\n}.isRequired;\n\nexport default ContactsForm;","import React from 'react'\nimport PropTypes from 'prop-types';\n\nconst ContactsList = ({contacts, onDeleteContact}) => {\n    return (\n        <>\n        <div className=\"card\"> \n            <ul className=\"contactItem\">\n                {contacts.map(contact => (  \n                    <li key= {contact.id } >\n                        <p>{contact.name}</p>\n                        <p>{contact.number}</p>\n                        <button type=\"button\" onClick={onDeleteContact} id={contact.id}>\n                            Delete</button>\n                    </li>\n                ))}  \n            </ul>\n            </div>\n        </>\n    );\n}\n\nContactsList.propTypes = {\n    onDeleteContact: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    })),\n}\nexport default ContactsList;\n","import React from 'react'\n\nconst Section = ({title, children}) => {\n    return (\n        <>\n            <h2>{title}</h2>\n            {children}\n        </>\n    );\n}\n\nexport default Section;","import React from 'react'\nimport PropTypes from 'prop-types';\n\n\nconst ContactsFilter = ({ filter, setFilter }) => {\n    return (\n        <>\n        <label >Filter:\n            <input type=\"text\"\n                value={filter}\n                onChange={setFilter}\n            />\n            </label>\n        </>\n    );\n}\n\nContactsFilter.propTypes = {\n    filter: PropTypes.string,\n    setFilter: PropTypes.func,\n}.isRequired;\nexport default ContactsFilter;","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContact = createAction(\"contacts/addContact\");\nexport const deleteContact = createAction(\"contacts/deleteContact\");\nexport const getAllContacts = createAction(\"contacts/getAllContacts\");\nexport const filterContacts = createAction(\"contacts/filterContacts\");\n\nexport const setError = createAction(\"contacts/setError\");\nexport const resetError = createAction(\"contacts/resetError\");\nexport const setContactsLoading = createAction(\"contacts/setContactsLoading\");\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getContactSelector = state => state.contacts;\nconst filterContactSelector = state => state.filter;\nconst loaderContactSelector = state => state.isContactLoading;\nconst errorContactSelector = state => state.error;\n\nconst getFilteringContacts = createSelector(\n  [getContactSelector, filterContactSelector],\n  (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n);\nexport { getContactSelector, filterContactSelector, loaderContactSelector, errorContactSelector, getFilteringContacts };\n","import React, { Component } from \"react\";\nimport ContactsForm from \"./contactsForm/ContactsForm\";\nimport ContactsList from \"./contactsList/ContactsList\";\nimport Section from \"./section/Section\";\nimport { connect } from \"react-redux\";\nimport ContactsFilter from \"./filter/ContactsFilter\";\nimport { filterContacts } from \"../redux/contacts/contactsAction\";\nimport { addContactOperation, deleteContactsOperation, getAllContactsOperation } from \"../redux/contacts/contactsOperation\";\nimport {\n  errorContactSelector,\n  filterContactSelector,\n  getContactSelector,\n  getFilteringContacts\n} from \"../redux/contacts/contactsSelectors\";\n\nclass Contacts extends Component {\n  state = {\n    contacts: {\n      items: [],\n      filter: \"\"\n    }\n  };\n\n  async componentDidMount() {\n    this.props.getAllContactsOperation();\n  }\n\n  addContact = async contact => {\n    this.props.addContactOperation(contact);\n  };\n\n  onDeleteContact = async e => {\n    const { id } = e.target;\n    this.props.deleteContactsOperation(id);\n  };\n\n  checkDublicateName = name => {\n    return this.props.contacts.some(contact => contact.name === name);\n  };\n\n  setFilter = e => {\n    const { value } = e.target;\n    this.props.filterContacts(value);\n  };\n\n  getFilteredContacts = () => {\n    return this.props.contacts.filter(contact => contact.name.toLowerCase().includes(this.props.filter.toLowerCase()));\n  };\n\n  render() {\n    return (\n      <>\n        {this.props.error && <h2>{this.props.error}</h2>}\n        {this.props.isLoading && <h2>Loading....</h2>}\n        <Section title=\"Phonebook\">\n          <ContactsForm addContact={this.addContact} checkDublicateName={this.checkDublicateName} />\n        </Section>\n\n        <Section title=\"Find contact by name\">\n          <ContactsFilter filter={this.props.filter} setFilter={this.setFilter} />\n        </Section>\n\n        <Section title=\"Contacts\">\n          <ContactsList contacts={this.getFilteredContacts()} onDeleteContact={this.onDeleteContact} />\n        </Section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getContactSelector(state),\n    filter: filterContactSelector(state),\n    error: errorContactSelector(state),\n    filterContacts: getFilteringContacts(state)\n  };\n};\n\nconst mapDispatchToProps = {getAllContactsOperation, addContactOperation, deleteContactsOperation, filterContacts};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n","import axios from \"axios\";\nimport { setContactsLoading, setError } from \"./contactsAction\";\n\nimport { addContact, deleteContact, getAllContacts } from \"./contactsAction\";\n\nconst getAllContactsOperation = () => async dispatch => {\n  dispatch(setContactsLoading());\n  try {\n    const { data } = await axios.get(`https://phonebook-3ae5c-default-rtdb.firebaseio.com/contacts.json`);\n    if (data) {\n      const contacts = Object.keys(data).map(key => ({ id: key, ...data[key] }));\n      dispatch(getAllContacts(contacts));\n    }\n  } catch (error) {\n    dispatch(setError(error.response.data.error));\n  } finally {\n    dispatch(setContactsLoading());\n  }\n};\n\nconst addContactOperation = contact => async dispatch => {\n  dispatch(setContactsLoading());\n  try {\n    const { data } = await axios.post(`https://phonebook-3ae5c-default-rtdb.firebaseio.com/contacts.json`, contact);\n    dispatch(addContact({ ...contact, id: data.name }));\n  } catch (error) {\n    dispatch(setError(error.response.data.error));\n  } finally {\n    dispatch(setContactsLoading());\n  }\n};\n\nconst deleteContactsOperation = id => async dispatch => {\n  dispatch(setContactsLoading());\n  try {\n    await axios.delete(`https://phonebook-3ae5c-default-rtdb.firebaseio.com/contacts/${id}.json`);\n    dispatch(deleteContact(id));\n  } catch (error) {\n    dispatch(setError(error.response.data.error));\n  } finally {\n    dispatch(setContactsLoading());\n  }\n};\n\n\nexport { addContactOperation, deleteContactsOperation, getAllContactsOperation };\n","import React from 'react'\nimport Contacts from './Contacts'\n\nconst App = () => {\n    return (\n        <>\n            <Contacts/>\n        </>\n    );\n}\n\nexport default App;","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\n\nimport {addContact, deleteContact, getAllContacts, filterContacts, setContactsLoading, setError, resetError} from \"./contactsAction\";\n\nexport const contactsReducer = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) => [...state.filter(contact => contact.id !== payload)],\n  [getAllContacts]: (_, { payload }) => payload\n});\n\nexport const filterReducer = createReducer(\"\", {\n  [filterContacts]: (_, { payload }) => payload\n});\n\nconst contactLoaderReducer = createReducer(false, {\n  [setContactsLoading]: state => !state\n});\n\nconst contactErrorReducer = createReducer(\"\", {\n  [setError]: (_, { payload }) => payload,\n  [resetError]: () => \"\"\n});\n\nconst contactReducer = combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n  isLoadind: contactLoaderReducer,\n  error: contactErrorReducer\n});\n\nexport default contactReducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport { contactsReducer, filterReducer } from \"./contacts/contactsReducer\";\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer\n});\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}